<img src="/images/phone-network-diagram.png" alt="Phone Network Diagram" style="max-width:100%;height:auto;"/>


## The Pieces

First I will describe each piece in that architecture image.

### SIP Registar

The SIP registrar is where are all endpoints will register to (duh). It is powered by Kamailio with the registartion module and the new and improved jannson-rpc module (which we tested heavily) for dynamic loading of users and other load balancer information. 

NOTE: Dynamic data loading in Kamailio proved to be problematic for us for a long time. The options available to us either required us to add another piece of tech to our stack (mod_kazoo) or weren't stable at all when tested under load (jsonrpc-c). Lucky for us, Flowroute released a new and improved JSON RPC module using the JANSSON C library and it has performed beautifully.

### SIP Proxy

The sip proxy is our gateway to the PSTN and is also powered by Kamailio. It will be configured to support multiple trunk providers and will use the dynamic routing module to decide which PSTN to send outbound traffic to. 

NOTE: We opted to use two different boxes for the proxy and registar, but you could easily combine them into one box.

### Media Servers

These babies are powered by FreeSWITCH and get their dialplan configuration via HTTP using the mod\_xml_curl module. Most call routing instructions will be handled in FreeSWITCH because of the ease of configuration. 

### Manager

The manager will serve all routing instructions, user data, and any other data the media, proxy, and registrar may need. It supports access via json-rpc for kamailio instances, and HTTP for FreeSWITCH boxes.

### Database

Scalable, redundant, multi-datacenter databases are a hot topic right now, in particular NoSQL solutions like Couchbase. Most of the data we are dealing with, however, is relational data (e.g. users are related to devices, devices are related to locations, locations are related to accounts). Others have gone the route of putting relational data into NoSQL solutions, which can work fine. We, however, opted to stick with a tried and true, performant, relational database: Postgresql. 

I can hear you say it... what about master-master replication, especially across data centers? Introducing Postgres Bi-directional replication (BDR). It is in beta, but is slated to go into production Postgres in the next version. We are using the beta to much success. I have a blog post drafted on installing and configuring BDR that I will release soon.