<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Angular on Clint Berry</title><link>https://clintberry.com/categories/angular/</link><description>Recent content in Angular on Clint Berry</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 29 Apr 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://clintberry.com/categories/angular/index.xml" rel="self" type="application/rss+xml"/><item><title>Modular AngularJS App Design</title><link>https://clintberry.com/2013/modular-angularjs-application-design/</link><pubDate>Mon, 29 Apr 2013 00:00:00 +0000</pubDate><guid>https://clintberry.com/2013/modular-angularjs-application-design/</guid><description>&lt;p>&lt;img src="http://clintberry.com/images/angular-module1.png" alt="angular module" width="225" height="200" class="alignleft size-full wp-image-836" />&lt;/p>
&lt;p>I am a sucker for modules. Something about bundling a set of functionality and display logic into a module that can be easily redistributed for many apps makes my skin tingle. So when I saw that “modules” were a big part of the AngularJS methodology, I was super excited to try it out. I quickly realized however, that most of the examples online used one module for the entire application, which didn’t seem all that modular to me.&lt;/p></description></item><item><title>AngularJS WebSocket Service Example</title><link>https://clintberry.com/2013/angular-js-websocket-service/</link><pubDate>Tue, 23 Apr 2013 00:00:00 +0000</pubDate><guid>https://clintberry.com/2013/angular-js-websocket-service/</guid><description>&lt;p>&lt;img src="http://clintberry.com/images/angular_logofull.png" alt="angular_logofull" title="angular_logofull" width="382" height="99" class="alignnone size-full wp-image-787" />&lt;/p>
&lt;p>At my curent company we are using Angular.js for a new desktop application (yes, a desktop application, but I won’t get into that). Our app gets its data and events from a web service via a WebSocket connection. Angular comes bundled with some great tools to connect to REST servers, but it doesn’t come with anything to help you with real-time data (and it probably shouldn’t).&lt;/p>
&lt;p>Here is an example of an Angular service (factory) that uses WebSockets to get data:&lt;/p></description></item></channel></rss>